unit uclAPIunit;

interface

uses
  SysUtils, Classes, HTTPApp , ULKJSON , DB, IBODataset, uclDataSet, uclBaseDataset,
  SDEngine;

type
  TWebModule1 = class(TWebModule)
    SDDatabase1: TSDDatabase;
    SDTable1: TSDTable;
    procedure WebModule1WebActionItem1Action(Sender: TObject;
      Request: TWebRequest; Response: TWebResponse; var Handled: Boolean);
    procedure WebModule1WebActionItem2Action(Sender: TObject;
      Request: TWebRequest; Response: TWebResponse; var Handled: Boolean);
  private
    { Private declarations }
  public
    { Public declarations }
  end;
  function FieldValueByNameAs(p_JSONObj: TlkJSONObject;
                            p_FieldName: string;
                            p_FieldType: TlkJSONtypes;
                            p_DefaultValue: Variant;
                            var p_IsFieldExists: Boolean;
                            p_RaiseErrorOnFieldNotFound: Boolean = false;
                            p_RaiseErrorOnFieldMisMatch: Boolean = false): Variant;

var
  WebModule1: TWebModule1;
  GJSONobj: TlkJSONobject;
  GJSONstr: String;
  GStore: TlkJSONbase;

implementation

{$R *.DFM}
function FieldValueByNameAs(p_JSONObj: TlkJSONObject;
                            p_FieldName: string;
                            p_FieldType: TlkJSONtypes;
                            p_DefaultValue: Variant;
                            var p_IsFieldExists: Boolean;
                            p_RaiseErrorOnFieldNotFound: Boolean = false;
                            p_RaiseErrorOnFieldMisMatch: Boolean = false): Variant;
var
  LFld: TlkJsonBase;
begin

  if p_JSONObj = nil then
    Assert(false, 'Mandatory parameter JSON Object is not initialized.');

  p_FieldName:= Trim(p_FieldName);
  if p_FieldName = '' then
    Assert(false, 'Mandatory parameter Field name is blank.');

  p_IsFieldExists:= false;
  Result := p_DefaultValue;

  LFld:= p_JSONObj.Field[p_FieldName];
  if LFld = nil then
  begin
    if p_RaiseErrorOnFieldNotFound then
      raise Exception.Create('Field ' + p_FieldName + ' does not exist in JSON parameters.');

    Exit;
  end;

  p_IsFieldExists:= true;

  if LFld.SelfType <> p_FieldType then
  begin
    if p_RaiseErrorOnFieldMisMatch then
      raise Exception.Create('Invalid JSON parameter. Field type mismatch. Field ' + p_FieldName +
        ' is supplied as ' + LFld.SelfTypeName + ', however, it is expected to be supplied as ' + '.');
    Exit;
  end;

  case LFld.SelfType of
    jsString: Result:= TlkJSONstring(LFld).Value;
    jsNumber: Result:= TlkJSONnumber(LFld).Value;
    jsBoolean: Result:= TlkJSONboolean(LFld).Value;
  end;//case..
end;

//--------------------------------------------------------------------------------------
// Database Connection
procedure EstDBConnection(SDDatabase1: TSDDatabase; SDTable1: TSDTable);
begin
    SDDatabase1.DatabaseName := 'Novatech113@:LibraryDB';
    SDDatabase1.RemoteDatabase := 'Novatech113@:LibraryDB';
    SDDatabase1.ServerType := stOLEDB;

    SDDatabase1.LoginPrompt := False;
    SDDatabase1.Params.Values['User Name'] := 'sa';
    SDDatabase1.Params.Values['Password'] := 'manager';
    SDDatabase1.Connected := True;

    SDTable1.DatabaseName := 'Novatech113@:LibraryDB';
    SDTable1.TableName := 'dbo.AllBooks';
    SDTable1.Active := True;
end;

//---------------------------------------------------------------------------------------------------
// Webmodule Path /Name

procedure TWebModule1.WebModule1WebActionItem1Action(Sender: TObject;
  Request: TWebRequest; Response: TWebResponse; var Handled: Boolean);
begin
  {GJSONobj:=TlkJSONobject.create;
  try
    
    GJSONobj.Add('name','Akhil Mathew');
    GJSONobj.Add('age','21');

    Response.ContentType:='application/Json';
    GJSONstr:= TlkJSON.GenerateText(GJSONobj);
    //JSONstr:= TlkJSON.GenerateText(JSONobj);
    //Response.Content:=TlkJSON.GenerateText(JSONobj); //JSONstr;
    Response.Content:= GJSONstr;
  finally
  GJSONobj.Free;
  end;}

   //important parsing the request content of string type in json base and typecasting in json object .
  {LReqContent:= TlkJSON.parsetext(Request.Content) as TlkJSONobject;
  Response.Content:= LKJSON.getString('age');}

  // Retrieving from database;
  EstDBConnection(SDDatabase1, SDTable1);
  response.Content:='Okay Working';

end;

//-------------------------------------------------------------------------------------------------------

//  /post path web module action

procedure TWebModule1.WebModule1WebActionItem2Action(Sender: TObject;
  Request: TWebRequest; Response: TWebResponse; var Handled: Boolean);

var
//LFieldExist: Boolean;
LList: TlkJSONlist;
responseList: TlkJSONlist;
i: integer;
LJsonobj: TlkJSONobject;

begin
  //Read the field values coming in the url body

  { GJSONobj:= TlkJSONobject.create;
  GJSONobj:= TlkJSON.parsetext(Request.Content) as TlkJSONobject;
  try
    GJSONstr:=  FieldValueByNameAs(GJSONobj , 'name' , jsString, '', LFieldExist , false , false);
    if LFieldExist then
      Response.Content:= GJSONstr;
    end;
  finally
    GJSONobj.Free;
  end; }

//adding the content in List

  {try
    GJSONobj:=TlkJSONobject.create;
    LList:= TlkJSON.parsetext(Request.Content) as TlkJSONlist;
    responseList:= TlkJSONlist.Create;
    //LJsonobj:= TlkJSONobject.Create();
    for i:=0 to LList.Count-1 do
    begin

      GJSONobj:= LList.child[i] as TlkJSONobject;
      LJsonobj:= TlkJSONobject.create;

      LJsonobj.Add('Title :',GJSONobj.getString('title'));
      LJsonobj.Add('Author:',GJSONobj.getString('author'));
      LJsonobj.Add('ID:',GJSONobj.getInt('id'));
      LJsonobj.Add('Category :',GJSONobj.getString('category'));

      responseList.Add(LJsonobj);
    end;
   Response.Content:= TlkJSON.GenerateText(responseList);

  finally
    responseList.Free;
  end; }

  //Adding All to db in insertrecord
  {EstDBConnection(SDDatabase1, SDTable1);
  SDTable1.Insert;
  SDTable1.InsertRecord([1002,'Gabriel Garcia Marquez','Nebraska Wooden','fiction','false']);
  SDTable1.InsertRecord([1003,'Pearl Dickens','bus','SciFi','false']);
  SDTable1.InsertRecord([1004,'Zora Neale Hurston','Dust Tracks on a Road','biography','false']);
  SDTable1.Post;
  Response.Content:= 'Database Updated';}
end;

end.
